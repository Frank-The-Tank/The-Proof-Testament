import { OnInit, OnDestroy, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { QuillEditorComponent } from 'ngx-quill/src/quill-editor.component';
import { Symbols } from '../../model/symbols';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import { SymbolPickerService } from '../symbol-picker/symbol-picker.service';
import { EditorService } from './editor.service';
export declare class EditorComponent implements OnInit, OnDestroy {
    private factoryResolver;
    private symbolService;
    private editorService;
    viewContainerRef: ViewContainerRef;
    keys: (o: any) => string[];
    symbols: typeof Symbols;
    editorInstance: any;
    previousEditorSelection: any;
    infoFilled: boolean;
    private infoFilledSubscription;
    outline: string;
    private outlineSubscription;
    hideSymbols: boolean;
    private hideSymbolsSubscription;
    isReadOnly: boolean;
    form: FormGroup;
    modules: {};
    equalsUnicode: string;
    impliesUnicode: string;
    followsFromUnicode: string;
    lessThanUnicode: string;
    greaterThanUnicode: string;
    bindings: {
        enter: {
            key: number;
            handler: () => void;
        };
    };
    constructor(fb: FormBuilder, factoryResolver: ComponentFactoryResolver, symbolService: SymbolPickerService, editorService: EditorService);
    editor: QuillEditorComponent;
    ngOnInit(): void;
    ngOnDestroy(): void;
    generateSymbolShortcut(symbolIdentifier: any): string;
    insertSymbol(selectedVal: any): void;
    symbolSelectorChanged(selectedVal: any): void;
    addBindingCreated(quill: any): void;
    setControl(): void;
    setFocus($event: any): void;
    updateSelection($event: any): void;
    export(): void;
}
